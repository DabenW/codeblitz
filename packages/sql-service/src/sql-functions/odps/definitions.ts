export enum ODPS_FUNCTION_TYPE_ENUM {
  AGGR = 'AGGR',
  MATH = 'MATH',
  RANGE = 'RANGE',
  COMPLEX = 'COMPLEX',
  STRING = 'STRING',
  DATE = 'DATE',
  OTHER = 'OTHER',
}

export const functionTypeTextMap: Record<ODPS_FUNCTION_TYPE_ENUM, string> = {
  AGGR: '聚合函数',
  MATH: '数学函数',
  RANGE: '窗口函数',
  COMPLEX: '复杂类型函数',
  STRING: '字符串函数',
  DATE: '日期函数',
  OTHER: '其他函数'
};

// ODPS `聚合函数` 名枚举
export enum AGGR_FUNCTIONS_ENUM {
  AVG = 'AVG',
  COUNT = 'COUNT',
  COUNT_IF = 'COUNT_IF',
  MAX = 'MAX',
  MIN = 'MIN',
  MEDIAN = 'MEDIAN',
  STDDEV = 'STDDEV',
  STDDEV_SAMP = 'STDDEV_SAMP',
  SUM = 'SUM',
  WM_CONCAT = 'WM_CONCAT',
  ANY_VALUE = 'ANY_VALUE',
  APPROX_DISTINCT = 'APPROX_DISTINCT',
  ARG_MAX = 'ARG_MAX',
  ARG_MIN = 'ARG_MIN',
  MAX_BY = 'MAX_BY',
  MIN_BY = 'MIN_BY',
  COLLECT_LIST = 'COLLECT_LIST',
  COLLECT_SET = 'COLLECT_SET',
  COVAR_POP = 'COVAR_POP',
  COVAR_SAMP = 'COVAR_SAMP',
  NUMERIC_HISTOGRAM = 'NUMERIC_HISTOGRAM',
  PERCENTILE = 'PERCENTILE',
  PERCENTILE_APPROX = 'PERCENTILE_APPROX',
  VARIANCE = 'VARIANCE',
  VAR_POP = 'VAR_POP',
  VAR_SAMP = 'VAR_SAMP',
  BITWISE_OR_AGG = 'BITWISE_OR_AGG',
  BITWISE_AND_AGG = 'BITWISE_AND_AGG',
  MAP_AGG = 'MAP_AGG',
  MULTIMAP_AGG = 'MULTIMAP_AGG',
  MAP_UNION = 'MAP_UNION',
  MAP_UNION_SUM = 'MAP_UNION_SUM',
  HISTOGRAM = 'HISTOGRAM',
}

// ODPS `数学函数` 名枚举
export enum MATH_FUNCTIONS_ENUM {
  ABS = 'ABS',
  ACOS = 'ACOS',
  ASIN = 'ASIN',
  ATAN = 'ATAN',
  CEIL = 'CEIL',
  CONV = 'CONV',
  COS = 'COS',
  COSH = 'COSH',
  COT = 'COT',
  EXP = 'EXP',
  FLOOR = 'FLOOR',
  LN = 'LN',
  LOG = 'LOG',
  POW = 'POW',
  RAND = 'RAND',
  ROUND = 'ROUND',
  SIN = 'SIN',
  SINH = 'SINH',
  SQRT = 'SQRT',
  TAN = 'TAN',
  TANH = 'TANH',
  TRUNC = 'TRUNC',
  BIN = 'BIN',
  CBRT = 'CBRT',
  CORR = 'CORR',
  DEGREES = 'DEGREES',
  E = 'E',
  FACTORIAL = 'FACTORIAL',
  FORMAT_NUMBER = 'FORMAT_NUMBER',
  HEX = 'HEX',
  LOG2 = 'LOG2',
  LOG10 = 'LOG10',
  PI = 'PI',
  RADIANS = 'RADIANS',
  SIGN = 'SIGN',
  SHIFTLEFT = 'SHIFTLEFT',
  SHIFTRIGHT = 'SHIFTRIGHT',
  SHIFTRIGHTUNSIGNED = 'SHIFTRIGHTUNSIGNED',
  UNHEX = 'UNHEX',
  WIDTH_BUCKET = 'WIDTH_BUCKET',
}

// ODPS `窗口函数` 名枚举
export enum RANGE_FUNCTIONS_ENUM {
  ROW_NUMBER = 'ROW_NUMBER',
  RANK = 'RANK',
  DENSE_RANK = 'DENSE_RANK',
  PERCENT_RANK = 'PERCENT_RANK',
  CUME_DIST = 'CUME_DIST',
  NTILE = 'NTILE',
  LAG = 'LAG',
  LEAD = 'LEAD',
  FIRST_VALUE = 'FIRST_VALUE',
  LAST_VALUE = 'LAST_VALUE',
  NTH_VALUE = 'NTH_VALUE',
  CLUSTER_SAMPLE = 'CLUSTER_SAMPLE',
  COUNT = 'COUNT', // 与聚合函数重名
  MIN = 'MIN', // 与聚合函数重名
  MAX = 'MAX', // 与聚合函数重名
  AVG = 'AVG', // 与聚合函数重名
  SUM = 'SUM', // 与聚合函数重名
  MEDIAN = 'MEDIAN', // 与聚合函数重名
  STDDEV = 'STDDEV', // 与聚合函数重名
  STDEVPOP = 'STDEVPOP',
  STDDEV_SAMP = 'STDDEV_SAMP', // 与聚合函数重名
}

// ODPS `复杂函数` 名枚举
export enum COMPLEX_FUNCTIONS_ENUM {
  ALL_MATCH = 'ALL_MATCH',
  ANY_MATCH = 'ANY_MATCH',
  ARRAY = 'ARRAY',
  ARRAY_CONTAINS = 'ARRAY_CONTAINS',
  ARRAY_DISTINCT = 'ARRAY_DISTINCT',
  ARRAY_EXCEPT = 'ARRAY_EXCEPT',
  ARRAY_INTERSECT = 'ARRAY_INTERSECT',
  ARRAY_JOIN = 'ARRAY_JOIN',
  ARRAY_MAX = 'ARRAY_MAX',
  ARRAY_MIN = 'ARRAY_MIN',
  ARRAY_POSITION = 'ARRAY_POSITION',
  ARRAY_REDUCE = 'ARRAY_REDUCE',
  ARRAY_REMOVE = 'ARRAY_REMOVE',
  ARRAY_REPEAT = 'ARRAY_REPEAT',
  ARRAY_SORT = 'ARRAY_SORT',
  ARRAY_UNION = 'ARRAY_UNION',
  ARRAYS_OVERLAP = 'ARRAYS_OVERLAP',
  ARRAYS_ZIP = 'ARRAYS_ZIP',
  CONCAT = 'CONCAT',
  EXPLODE = 'EXPLODE',
  FILTER = 'FILTER',
  INDEX = 'INDEX',
  POSEXPLODE = 'POSEXPLODE',
  SIZE = 'SIZE',
  SLICE = 'SLICE',
  SORT_ARRAY = 'SORT_ARRAY',
  TRANSFORM = 'TRANSFORM',
  ZIP_WITH = 'ZIP_WITH',
  MAP = 'MAP',
  MAP_CONCAT = 'MAP_CONCAT',
  MAP_ENTRIES = 'MAP_ENTRIES',
  MAP_FILTER = 'MAP_FILTER',
  MAP_FROM_ARRAYS = 'MAP_FROM_ARRAYS',
  MAP_FROM_ENTRIES = 'MAP_FROM_ENTRIES',
  MAP_KEYS = 'MAP_KEYS',
  MAP_VALUES = 'MAP_VALUES',
  MAP_ZIP_WITH = 'MAP_ZIP_WITH',
  TRANSFORM_KEYS = 'TRANSFORM_KEYS',
  TRANSFORM_VALUES = 'TRANSFORM_VALUES',
  FIELD = 'FIELD',
  INLINE = 'INLINE',
  STRUCT = 'STRUCT',
  NAMED_STRUCT = 'NAMED_STRUCT',
  FROM_JSON = 'FROM_JSON',
  GET_JSON_OBJECT = 'GET_JSON_OBJECT',
  JSON_TUPLE = 'JSON_TUPLE',
  TO_JSON = 'TO_JSON',
}

// ODPS `字符串函数` 名枚举
export enum STRING_FUNCTIONS_ENUM {
  ASCII = 'ASCII',
  CHAR_MATCHCOUNT = 'CHAR_MATCHCOUNT',
  CHR = 'CHR',
  CONCAT = 'CONCAT', // 与复杂函数重名
  CONCAT_WS = 'CONCAT_WS',
  ENCODE = 'ENCODE',
  FIND_IN_SET = 'FIND_IN_SET',
  FORMAT_NUMBER = 'FORMAT_NUMBER', // 与数学函数重名
  FROM_JSON = 'FROM_JSON', // 与复杂函数重名
  GET_JSON_OBJECT = 'GET_JSON_OBJECT', // 与复杂函数重名
  INSTR = 'INSTR',
  IS_ENCODING = 'IS_ENCODING',
  KEYVALUE = 'KEYVALUE',
  KEYVALUE_TUPLE = 'KEYVALUE_TUPLE',
  LENGTH = 'LENGTH',
  LENGTHB = 'LENGTHB',
  LOCATE = 'LOCATE',
  LTRIM = 'LTRIM',
  MD5 = 'MD5',
  PARSE_URL = 'PARSE_URL',
  PARSE_URL_TUPLE = 'PARSE_URL_TUPLE',
  REGEXP_COUNT = 'REGEXP_COUNT',
  REGEXP_EXTRACT = 'REGEXP_EXTRACT',
  REGEXP_INSTR = 'REGEXP_INSTR',
  REGEXP_REPLACE = 'REGEXP_REPLACE',
  REGEXP_SUBSTR = 'REGEXP_SUBSTR',
  REPEAT = 'REPEAT',
  REVERSE = 'REVERSE',
  RTRIM = 'RTRIM',
  SPACE = 'SPACE',
  SPLIT_PART = 'SPLIT_PART',
  SUBSTR = 'SUBSTR',
  SUBSTRING = 'SUBSTRING',
  TO_CHAR = 'TO_CHAR',
  TO_JSON = 'TO_JSON', // 与复杂函数重名
  TOLOWER = 'TOLOWER',
  TOUPPER = 'TOUPPER',
  TRIM = 'TRIM',
  URL_DECODE = 'URL_DECODE',
  URL_ENCODE = 'URL_ENCODE',
  JSON_TUPLE = 'JSON_TUPLE', // 与复杂函数重名
  LPAD = 'LPAD',
  RPAD = 'RPAD',
  REPLACE = 'REPLACE',
  SOUNDEX = 'SOUNDEX',
  SUBSTRING_INDEX = 'SUBSTRING_INDEX',
  TRANSLATE = 'TRANSLATE',
  REGEXP_EXTRACT_ALL = 'REGEXP_EXTRACT_ALL',
}

// ODPS `日期函数` 名枚举
export enum DATE_FUNCTIONS_ENUM {
  DATEADD = 'DATEADD',
  DATE_ADD = 'DATE_ADD',
  DATE_FORMAT = 'DATE_FORMAT',
  DATE_SUB = 'DATE_SUB',
  DATEDIFF = 'DATEDIFF',
  DATEPART = 'DATEPART',
  DATETRUNC = 'DATETRUNC',
  FROM_UNIXTIME = 'FROM_UNIXTIME',
  GETDATE = 'GETDATE',
  ISDATE = 'ISDATE',
  LASTDAY = 'LASTDAY',
  TO_DATE = 'TO_DATE',
  TO_CHAR = 'TO_CHAR', // 与字符串函数重名
  UNIX_TIMESTAMP = 'UNIX_TIMESTAMP',
  WEEKDAY = 'WEEKDAY',
  WEEKOFYEAR = 'WEEKOFYEAR',
  ADD_MONTHS = 'ADD_MONTHS',
  CURRENT_TIMESTAMP = 'CURRENT_TIMESTAMP',
  DAY = 'DAY',
  DAYOFMONTH = 'DAYOFMONTH',
  EXTRACT = 'EXTRACT',
  FROM_UTC_TIMESTAMP = 'FROM_UTC_TIMESTAMP',
  HOUR = 'HOUR',
  LAST_DAY = 'LAST_DAY',
  MINUTE = 'MINUTE',
  MONTH = 'MONTH',
  MONTHS_BETWEEN = 'MONTHS_BETWEEN',
  NEXT_DAY = 'NEXT_DAY',
  QUARTER = 'QUARTER',
  SECOND = 'SECOND',
  TO_MILLIS = 'TO_MILLIS',
  YEAR = 'YEAR',
}

// ODPS `其他函数` 名枚举
export enum OTHER_FUNCTIONS_ENUM {
  BASE64 = 'BASE64',
  CAST = 'CAST',
  COALESCE = 'COALESCE',
  COMPRESS = 'COMPRESS',
  CRC32 = 'CRC32',
  DECODE = 'DECODE',
  DECOMPRESS = 'DECOMPRESS',
  GET_IDCARD_AGE = 'GET_IDCARD_AGE',
  GET_IDCARD_BIRTHDAY = 'GET_IDCARD_BIRTHDAY',
  GET_IDCARD_SEX = 'GET_IDCARD_SEX',
  GET_USER_ID = 'GET_USER_ID',
  GREATEST = 'GREATEST',
  HASH = 'HASH',
  IF = 'IF',
  LEAST = 'LEAST',
  MAX_PT = 'MAX_PT',
  NULLIF = 'NULLIF',
  NVL = 'NVL',
  ORDINAL = 'ORDINAL',
  PARTITION_EXISTS = 'PARTITION_EXISTS',
  SAMPLE = 'SAMPLE',
  SHA = 'SHA',
  SHA1 = 'SHA1',
  SHA2 = 'SHA2',
  SIGN = 'SIGN', // 与数学函数重名
  SPLIT = 'SPLIT',
  STACK = 'STACK',
  STR_TO_MAP = 'STR_TO_MAP',
  TABLE_EXISTS = 'TABLE_EXISTS',
  TRANS_ARRAY = 'TRANS_ARRAY',
  TRANS_COLS = 'TRANS_COLS',
  UNBASE64 = 'UNBASE64',
  UNIQUE_ID = 'UNIQUE_ID',
  UUID = 'UUID',
}

export interface PARAM_DOC {
  label: string;
  desc: string;
}

export interface FUNCTION_DETAIL {
  // 函数名
  name: string;
  // 函数简单描述
  simpleDesc: string;
  // 函数使用命令
  usageCommand: string;
  // 函数使用描述
  usageDesc: string;
  // 函数返回值描述
  returnDesc: string;
  // 使用示例，不一定有
  example?: string;
  // 详细文档地址
  docUrl: string;
  // 函数所属类别
  functionType: ODPS_FUNCTION_TYPE_ENUM;
  // 为 boolean 表示是否在 HIVE 中存在，string 表示在 HIVE 中肯定存在，但函数名不同
  functionInHive: boolean | string;
  // 参数参数列表文档, 不一定有
  paramDocs?: PARAM_DOC[];
}

// 备注: 函数名存在 16 个不同种类同名情况的重复，所以在函数提示中，暂时只做其中的一个提示，等未来能区分出具体函数类型后再做优化
